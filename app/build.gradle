plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.stan.buildsettings'
}

import com.stan.buildsettings.*

android {
    // 编译sdk版本，仅编译时使用，不被打包到apk种
    compileSdk BuildVersion.COMPILESDK

    defaultConfig {
        applicationId "com.stan.android"
        // 最低兼容sdk版本
        minSdk BuildVersion.MINSDK
        // 当前应用sdk版本，向前兼容
        targetSdk BuildVersion.TARGETSDK
        versionCode BuildVersion.CODE
        versionName BuildVersion.NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        sourceSets{ 实现项目目录自定义及确定哪些文件参与编译打包
//            main{
//
//            }
//        }
//        buildConfigField('String', 'name', '"xxx"') 定义配置属性，统一可由BuildConfig获取
//        manifestPlaceholders = [BUILD_NO: gradle.ext.buildNo, BUILD_MODE: gradle.ext.buildMode] 配置可以在 AndroidManifest.xml 中使用的参数。
//        useProguard true 统一开启混淆
//        applicationIdSuffix "rc"  包名后缀
//        versionNameSuffix ".test" 版本名后缀
//        externalNativeBuild {
//            ndkBuild {
//                // Passes an optional argument to ndk-build.
//                arguments "NDK_MODULE_PATH+=../../third_party/modules"
//            }
//            // For ndk-build, instead use the ndkBuild block.
//            cmake {
//                // Passes optional arguments to CMake.
//                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"
//
//                // Sets a flag to enable format macro constants for the C compiler.
//                cFlags "-D__STDC_FORMAT_MACROS"
//
//                // Sets optional flags for the C++ compiler.
//                cppFlags "-fexceptions", "-frtti"
//
//                // Specifies the library and executable targets from your CMake project
//                // that Gradle should build.
//                targets "libexample-one", "my-executible-demo"
//            }
//        }
//        ndk {
//            abiFilter 'armeabi-v7a' 编译出来的 Apk包只包含armeabi-v7a，不会包含其他的架构，例如 “X86”。
//        }
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../debug.keystore')
            storePassword 'android'
        }
        release {
            keyAlias 'PluginSign'
            keyPassword 'dfe_dfIJKER%*#12D02kmc'
            storeFile file('../plugin_release.keystore')
            storePassword 'dfe_dfIJKER%*#12D02kmc'
        }
    }

    buildTypes {

        // 针对版本做的配置项 也同样可以设置在defaultConfig中
        release {
            // 是否进行混淆
            minifyEnabled Config.MINIFY_ENABLED
            // 开启zipAlign可以让安装包中的资源按4字节对齐，减少应用在运行时的内存消耗
            zipAlignEnabled Config.ZIP_ALIGN_ENABLED
            // 是否压缩资源，如果开启，gradle在编译时帮我们把没有使用的资源给移除
            shrinkResources Config.SHRINK_RESOURCES
            // 配置混淆规则文件 （前提：minifyEnabled为true）
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 开启分包
            multiDexEnabled = true
            // 将我们需要的类打包进主包
            multiDexKeepFile file('multidex-config.pro')
            // 签名配置
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation Depends.AndroidX.core_ktx
    implementation Depends.AndroidX.appcompat
    implementation Depends.Google.constraintlayout
    implementation Depends.Kotlin.kotlin_stdlib
    implementation Depends.Kotlin.kotlinx_coroutines_android
    implementation Depends.Kotlin.kotlinx_coroutines_core
    implementation Depends.Kotlin.kotlinx_coroutines_core_jvm
}